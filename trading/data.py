import numpy as np

# Set up the default_rng from Numpy
rng = np.random.default_rng ()
NEWS_PERCENT = 0.01
M_STD = 2
DURATION_LOW_BOUND = 3
DURATION_UP_BOUND = 14
DATA_FILE_PATH = "stock_data_5y.txt"


# Make a function for the news
def news(chance, volatility):
    """
    Simulate the news with %chance

    Input:
        chance(list): The probability of news chance [no news chance, news chance].
        The sum of chance[0] and chance[1] should be 1.

        volatility(float): The volatility of drift and random increment.
        It is the deviation of random price.

    Output:
        duration(ndarray): The news duration contains each day's drift.

    Examples:
        >>> duration = news ([0.99,0.01], 200, 1)
    """
    # Choose whether there's news today
    news_today = rng.choice ([0, 1], p=chance)
    # Calculate m and drift
    m = rng.normal (0, M_STD)
    drift = m * volatility
    # Randomly choose the duration
    duration = rng.integers (DURATION_LOW_BOUND, DURATION_UP_BOUND)
    if news_today:
        final = np.full (duration, drift)
        return final
    else:
        return np.zeros (duration)


def generate_stock_price(days, initial_price, volatility):
    """
    Generates daily closing share prices for a company,
    for a given number of days.

    Input:
        days(int): The length of price days want to generate.

        initial_price(int): The price of the first day.

        volatility(float): The volatility of drift and random increment.
        It is the deviation of random price.

    Output:
        stock_prices(list): The price generated by input parameters.

    Examples:
        >>> stock_price = generate_stock_price (1000, 200, 1)
    """
    # Set stock_prices to be a zero array with length days
    stock_prices = np.zeros (days)
    # Set stock_prices in row 0 to be initial_price
    stock_prices[0] = initial_price
    # Set total_drift to be a zero array with length days
    totalDrift = np.zeros (days)
    # Loop over a range(1, days)
    for day in range (1, days):
        # Get the random normal increment
        inc = rng.normal (0, volatility)
        # Add stock_prices[day-1] to inc to get NewPriceToday
        NewPriceToday = stock_prices[day - 1] + inc
        # Get the drift from the news
        drift = news ([1 - NEWS_PERCENT, NEWS_PERCENT], volatility)
        # Get the duration
        duration = len (drift)
        # Add the drift to the next days
        drift_end_day = min (day + duration, days - 1)
        totalDrift[day:drift_end_day] += drift[:drift_end_day - day]
        # Add today's drift to today's price
        NewPriceToday += totalDrift[day]
        # Set stock_prices[day] to NewPriceToday or to NaN if it's negative
        if NewPriceToday <= 0:
            stock_prices[day] = np.nan
        else:
            stock_prices[day] = NewPriceToday
    return stock_prices

def find_closet_element_indexes(elements, row):
    """
    To find the closest element indexes of the row.

    Input:
        elements(list): elements need to find.

        row(ndarray): numpy array with one dimension

    Output:
        indexes(list): the indexes of closest elements
    """
    indexes = []
    for element in elements:
        row_copy = abs (row - element)
        index, = np.argwhere (row_copy == min (row_copy))[0]
        indexes.append (index)
    return indexes

def get_data(method='read', initial_price=None, volatility=None):
    """
    Generates or reads simulation data for one or more stocks over 5 years,
    given their initial share price and volatility.

    Input:
        method (str): either 'generate' or 'read' (default 'read').
            If method is 'generate', use generate_stock_price() to generate
                the data from scratch.
            If method is 'read', use Numpy's loadtxt() to read the data
                from the file stock_data_5y.txt.

        initial_price (list): list of initial prices for each stock (default None)
            If method is 'generate', use these initial prices to generate the data.
            If method is 'read', choose the column in stock_data_5y.txt with the closest
                starting price to each value in the list, and display an appropriate message.

        volatility (list): list of volatilities for each stock (default None).
            If method is 'generate', use these volatilities to generate the data.
            If method is 'read', choose the column in stock_data_5y.txt with the closest
                volatility to each value in the list, and display an appropriate message.

        If no arguments are specified, read price data from the whole file.

    Output:
        sim_data (ndarray): NumPy array with N columns, containing the price data
            for the required N stocks each day over 5 years.

    Examples:
        Returns an array with 2 columns:
            >>> get_data(method='generate', initial_price=[150, 250], volatility=[1.8, 3.2])

        Displays a message and returns None:
            >>> get_data(method='generate', initial_price=[150, 200])
            Please specify the volatility for each stock.

        Displays a message and returns None:
            >>> get_data(method='generate', volatility=[3])
            Please specify the initial price for each stock.

        Returns an array with 2 columns and displays a message:
            >>> get_data(method='read', initial_price=[210, 58])
            Found data with initial prices [210, 100] and volatilities [1.2, 3.4].

        Returns an array with 1 column and displays a message:
            >>> get_data(volatility=[5.1])
            Found data with initial prices [380] and volatilities [5.2].

        If method is 'read' and both initial_price and volatility are specified,
        volatility will be ignored (a message is displayed to indicate this):
            >>> get_data(initial_price=[210, 58], volatility=[5, 7])
            Found data with initial prices [210, 100] and volatilities [1.2, 3.4].
            Input argument volatility ignored.

        No arguments specified, all default values, returns price data for all stocks in the file:
            >>> get_data()
    """
    # If method is generate, use function to generate data.
    if method == "generate":
        if initial_price is not None and volatility is not None:
            N = len (initial_price)
            sim_data = np.zeros ([1000, N])
            for i in range (N):
                sim_data[:, i] = generate_stock_price (1000, initial_price[i], volatility[i])
            return sim_data
        elif volatility is None:
            print ("Please specify the volatility for each stock.")
            return None
        elif initial_price is None:
            print ("Please specify the initial price for each stock.")
            return None
    # if method is read, use numpy method to read data.
    elif method == "read":
        sim_data = np.loadtxt (DATA_FILE_PATH)
        if initial_price is not None or volatility is not None:
            if initial_price is None:
                # find the indexes of columns that volatility is closest to given.
                indexes = find_closet_element_indexes (volatility, sim_data[0, :])
            else:
                # find the indexes of columns that initial price is closest to given.
                indexes = find_closet_element_indexes (initial_price, sim_data[1, :])
            sim_data = sim_data[:, indexes]
            found_volatilities = sim_data[0, :].tolist ()
            found_initial_prices = sim_data[1, :].tolist ()
            sim_data = sim_data[1:, :]
            print (f"Found data with initial prices {found_initial_prices} and volatilities {found_volatilities}.")
            if initial_price is not None and volatility is not None:
                print("Input argument volatility ignored.")
            return sim_data
        else:
            sim_data = sim_data[1:, :]
            return sim_data